using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using Steropes.Tiles.TemplateGenerator.Model;

namespace Steropes.Tiles.TemplateGenerator.Editors
{
  public partial class TextureTileEditor : UserControl, IDetailEditor<TextureTile>
  {
    readonly FormValidator validator;

    public TextureTileEditor()
    {
      InitializeComponent();
      tagsBox.MinimumSize = new Size(0, tagsBox.Font.Height * 10);
      tagsBox.MaximumSize = new Size(int.MaxValue, tagsBox.Font.Height * 10);

      validator = new FormValidator()
      {
        tagsBox.CreateValidator().ForProvider(errorProvider),
        gridXBox.CreateValidator().ForProvider(errorProvider)
          .WithErrorCondition(Validators.LessThan(0), "X Offset must be a positive number"),
        gridXBox.CreateValidator().ForProvider(errorProvider)
          .WithErrorCondition(Validators.LessThan(0), "Y Offset must be a positive number"),
        anchorXBox.CreateValidator().ForProvider(errorProvider)
          .WithErrorCondition(Validators.LessThan(0), "X Offset must be a positive number"),
        anchorYBox.CreateValidator().ForProvider(errorProvider)
          .WithErrorCondition(Validators.LessThan(0), "Y Offset must be a positive number"),
      };
      validator.InputReceived += OnInputReceived;
    }

    public event EventHandler InputReceived;

    void OnInputReceived(object s, EventArgs e)
    {
      InputReceived?.Invoke(this, EventArgs.Empty);
    }

    public bool Valid => validator.Valid;

    public void ApplyFrom(TextureTile data)
    {
      try
      {
        validator.SuspendValidation();

        if (data == null)
        {
          gridXBox.Text = "";
          gridYBox.Text = "";
          anchorXBox.Text = "";
          anchorYBox.Text = "";
          tagsBox.Text = "";
        }
        else
        {
          gridXBox.SetValue(data.X);
          gridYBox.SetValue(data.Y);
          anchorXBox.SetValue(data.AnchorX);
          anchorYBox.SetValue(data.AnchorY);
          tagsBox.Text = string.Join("\n", data.Tags);
        }

        var enabled = data?.AutoGenerated != true;
        gridXBox.Enabled = enabled;
        gridYBox.Enabled = enabled;
        anchorXBox.Enabled = enabled;
        anchorYBox.Enabled = enabled;
        tagsBox.Enabled = enabled;
      }
      finally
      {
        validator.ResumeValidation();
      }
    }

    public TextureTile ApplyTo(TextureTile data)
    {
      if (data == null)
      {
        data = new TextureTile(false);
      }

      data.X = (int) gridXBox.Value;
      data.Y = (int) gridYBox.Value;
      data.AnchorX = (int?) anchorXBox.GetValue();
      data.AnchorY = (int?) anchorYBox.GetValue();
      data.Tags.Clear();
      data.Tags.AddRange(tagsBox.Lines.Select(arg => arg?.Trim()));
      return data;
    }
  }
}
