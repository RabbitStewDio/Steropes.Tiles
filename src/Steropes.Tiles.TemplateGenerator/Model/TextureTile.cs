using JetBrains.Annotations;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Runtime.CompilerServices;

namespace Steropes.Tiles.TemplateGenerator.Model
{
  public class TextureTile : INotifyPropertyChanged
  {
    public event PropertyChangedEventHandler PropertyChanged;
    public TextureGrid Parent { get; set; }
    public ObservableCollection<string> Tags { get; }
    int x;
    int y;
    int? anchorX;
    int? anchorY;

    string selectorHint;

    public TextureTile(bool autoGenerated)
    {
      Tags = new ObservableCollection<string>();
      AutoGenerated = autoGenerated;
    }

    public string SelectorHint
    {
      get { return selectorHint; }
      set
      {
        if (value == selectorHint) return;
        selectorHint = value;
        OnPropertyChanged();
      }
    }

    public bool AutoGenerated { get; }

    public TextureTile(bool autoGenerated, int x, int y, params string[] tags): this(autoGenerated)
    {
      this.x = x;
      this.y = y;
      foreach (var tag in tags)
      {
        Tags.Add(tag);
      }
    }

    public int? AnchorX
    {
      get { return anchorX; }
      set
      {
        if (value == anchorX) return;
        anchorX = value;
        OnPropertyChanged();
      }
    }

    public int? AnchorY
    {
      get { return anchorY; }
      set
      {
        if (value == anchorY) return;
        anchorY = value;
        OnPropertyChanged();
      }
    }

    public int X
    {
      get { return x; }
      set
      {
        if (value == x) return;
        x = value;
        OnPropertyChanged();
      }
    }

    public int Y
    {
      get { return y; }
      set
      {
        if (value == y) return;
        y = value;
        OnPropertyChanged();
      }
    }

    [NotifyPropertyChangedInvocator]
    protected virtual void OnPropertyChanged([CallerMemberName] string propertyName = null)
    {
      PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
  }
}