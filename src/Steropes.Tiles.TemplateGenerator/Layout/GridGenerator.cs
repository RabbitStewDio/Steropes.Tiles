using System.Collections.Generic;
using System.Linq;
using Steropes.Tiles.TemplateGenerator.Layout.MatchTypes;
using Steropes.Tiles.TemplateGenerator.Model;

namespace Steropes.Tiles.TemplateGenerator.Layout
{
  public static class MatchTypeStrategyFactory
  {
    static readonly Dictionary<MatcherType, IMatchTypeStrategy> generatorRules;

    static MatchTypeStrategyFactory()
    {
      generatorRules = new Dictionary<MatcherType, IMatchTypeStrategy>
      {
        {MatcherType.CardinalIndex, new CardinalIndexMatchTypeStrategy()},
        {MatcherType.CardinalFlags, new CardinalFlagMatchTypeStrategy()},
        {MatcherType.CellMap, new CellMapMatchTypeStrategy()},
        {MatcherType.Corner, new CornerMatchTypeStrategy()},
        {MatcherType.DiagonalFlags, new DiagonalFlagMatchTypeStrategy()},
        {MatcherType.NeighbourIndex, new NeighbourIndexMatchTypeStrategy()}
      };
    }

    public static IMatchTypeStrategy StrategyFor(MatcherType t)
    {
      if (generatorRules.TryGetValue(t, out var r))
      {
        return r;
      }

      return new BasicMatchTypeStrategy();
    }
  }

  public class GridGenerator
  {
    public void Regenerate(TextureCollection c)
    {
      foreach (var grid in c.Grids)
      {
        if (grid.MatcherType == MatcherType.Basic)
        {
          continue;
        }

        // preserve any tiles a user has placed manually 
        // should not happen via the UI, but if they added something via 
        // the XML file, we try our best to keep it alive.
        var predefinedTiles = grid.Tiles.Where(t => !t.AutoGenerated).ToList();
        var newTiles = MatchTypeStrategyFactory
          .StrategyFor(grid.MatcherType)
          .Generate(grid);
        predefinedTiles.AddRange(newTiles);
        grid.Tiles.ReplaceAll(newTiles);
      }
    }
  }
}