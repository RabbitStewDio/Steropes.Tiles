using JetBrains.Annotations;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Linq;
using System.Runtime.CompilerServices;

namespace Steropes.Tiles.TemplateGen.Models
{
    public class TextureTile : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler? PropertyChanged;
        public TextureGrid? Parent { get; set; }
        public ObservableCollection<string> Tags { get; }
        int x;
        int y;
        int? anchorX;
        int? anchorY;

        /// <summary>
        ///   A design-time metadata entry for documentation.
        ///   This tells the designer what tile to draw here. 
        /// </summary>
        string? selectorHint;

        /// <summary>
        ///   Indicates that the tile has been autogenerated as
        ///   part of a larger structure. This indicates that
        ///   the tile should not be edited by the user.
        /// </summary>
        bool autoGenerated;

        public TextureTile(bool autoGenerated = false)
        {
            Tags = new ObservableCollection<string>();
            Tags.CollectionChanged += OnTagsChanged;
            AutoGenerated = autoGenerated;
        }

        void OnTagsChanged(object? sender, NotifyCollectionChangedEventArgs e)
        {
            OnPropertyChanged(nameof(TreeNodeTitle));
            OnPropertyChanged(nameof(TagsText));
        }

        public bool IsEditable => !autoGenerated;

        public string? SelectorHint
        {
            get { return selectorHint; }
            set
            {
                if (value == selectorHint) return;
                selectorHint = value;
                OnPropertyChanged();
            }
        }

        public bool AutoGenerated
        {
            get => autoGenerated;
            set
            {
                if (value == autoGenerated) return;
                autoGenerated = value;
                OnPropertyChanged();
                OnPropertyChanged(nameof(IsEditable));
            }
        }

        public TextureTile(bool autoGenerated, int x, int y, params string[] tags) : this(autoGenerated)
        {
            this.x = x;
            this.y = y;
            foreach (var tag in tags)
            {
                Tags.Add(tag);
            }
        }

        public int? AnchorX
        {
            get { return anchorX; }
            set
            {
                if (value == anchorX) return;
                anchorX = value;
                OnPropertyChanged();
            }
        }

        public int? AnchorY
        {
            get { return anchorY; }
            set
            {
                if (value == anchorY) return;
                anchorY = value;
                OnPropertyChanged();
            }
        }

        public int X
        {
            get { return x; }
            set
            {
                if (value == x) return;
                x = value;
                OnPropertyChanged();
            }
        }

        public int Y
        {
            get { return y; }
            set
            {
                if (value == y) return;
                y = value;
                OnPropertyChanged();
            }
        }

        public string TagsText
        {
            get
            {
                return string.Join("\n", Tags);
            }
            set
            {
                Tags.Clear();
                Tags.AddRange(value.Split("\n").Where(x => !string.IsNullOrWhiteSpace(x)).Select(e => e.Trim()));
            }
        }

        public string TreeNodeTitle
        {
            get { return $"[{x},{y}] {string.Join(", ", Tags)}"; }
        }

        [NotifyPropertyChangedInvocator]
        protected virtual void OnPropertyChanged([CallerMemberName] string? propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
            FireContentsChanged();
        }

        public void FireContentsChanged()
        {
            Parent?.FireContentsChanged();
        }

        public TextureTile CreateDeepCopy()
        {
            var retval = new TextureTile()
            {
                X = X,
                Y = Y,
                AnchorX = AnchorX,
                AnchorY = AnchorY,
                AutoGenerated = AutoGenerated,
                SelectorHint = SelectorHint
            };
            retval.Tags.AddRange(Tags);
            return retval;
        }
    }
}
