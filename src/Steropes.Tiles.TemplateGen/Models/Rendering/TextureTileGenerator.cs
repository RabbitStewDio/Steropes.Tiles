using System.Collections.Generic;
using System.Linq;

namespace Steropes.Tiles.TemplateGen.Models.Rendering
{
    public static class TextureTileGenerator
    {
        public static void Regenerate(TileTextureCollection c)
        {
            foreach (var grid in c.Grids)
            {
                Regenerate(grid);
            }
        }

        public static void Regenerate(TextureGrid grid)
        {
            if (grid.MatcherType == MatcherType.Basic)
            {
                return;
            }

            // preserve any tiles a user has placed manually 
            // should not happen via the UI, but if they added something via 
            // the XML file, we try our best to keep it alive.
            var preservedTiles = grid.Tiles.Where(t => !t.AutoGenerated).ToList();
            var newTiles = MatchTypeStrategyFactory.StrategyFor(grid.MatcherType)
                                                   .Generate(grid);
            
            foreach (var t in newTiles.Where(t => !TileAlreadyExists(preservedTiles, t)))
            {
                preservedTiles.Add(t);
            }
            
            grid.Tiles.ReplaceAll(preservedTiles);
        }

        static bool TileAlreadyExists(List<TextureTile> existingTiles, TextureTile tile)
        {
            bool ContainsAll(ICollection<string> pool, IEnumerable<string> needles)
            {
                return needles.All(pool.Contains);
            }
            
            foreach (var t in existingTiles)
            {
                if (ContainsAll(t.Tags, tile.Tags))
                {
                    return true;
                }
            }

            return false;
        }
    }
}
