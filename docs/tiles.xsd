<?xml version="1.0" encoding="utf-8"?>
<xsd:schema id="style"
    targetNamespace="http://www.steropes-ui.org/namespaces/tiles/1.0"
    elementFormDefault="qualified"
    xmlns="http://www.steropes-ui.org/namespaces/tiles/1.0"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema"
>
  <xsd:annotation>
    <xsd:documentation>
      This schema exists to provide auto-complete hints for XML editors.
    </xsd:documentation>
  </xsd:annotation>

  <xsd:complexType mixed="false" name="tileMetaDataType">
    <xsd:annotation>
      <xsd:documentation>
        Metadata for tiles. Auto-Generated tiles will have the 'auto-generated'
        property set to true. These tiles will be deleted and regenerated whenever 
        a layout or preview operation runs. Tiles with that flag are not editable
        by the user.
        
        The selector hint attribute is used by the generator and preview code
        to provide additional hints in the output to make it easier for the 
        artists to know what tile they are working on. The contents of the selector
        hint attribute depends on the grid's tile selector mode and is not used
        at runtime.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:attribute type="xsd:string" name="selector-hint" use="optional"/>
    <xsd:attribute type="xsd:boolean" name="auto-generated" use="optional"/>
  </xsd:complexType>

  <xsd:complexType mixed="false" name="tileType">
    <xsd:annotation>
      <xsd:documentation>
        Defines a single tile. 
        
        Requires an 'x' and 'y' grid coordinate that references the
        tile's position in the grid. This coordinate is not a pixel
        coordinate!
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="metadata" type="tileMetaDataType" minOccurs="0" maxOccurs="1"/>
      <xsd:choice maxOccurs="unbounded" minOccurs="0">
        <xsd:element type="xsd:string" name="tag"/>
      </xsd:choice>
    </xsd:sequence>
    
    <xsd:attribute type="xsd:string" name="name" use="optional"/>
    <xsd:attribute name="x" type="xsd:unsignedInt" use="required"/>
    <xsd:attribute name="y" type="xsd:unsignedInt" use="required"/>
  </xsd:complexType>
  
  <xsd:simpleType name="matchTypeAttr">
    <xsd:annotation>
      <xsd:documentation>
        This list here is not exhaustive and simply defines the types the
        design time tool can understand. As this is metadata content it
        will be ignored at runtime.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="Basic"/>
      <xsd:enumeration value="CardinalFlags"/>
      <xsd:enumeration value="CardinalIndex"/>
      <xsd:enumeration value="CellMap"/>
      <xsd:enumeration value="Corner"/>
      <xsd:enumeration value="DiagonalFlags"/>
      <xsd:enumeration value="NeighbourIndex"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:complexType mixed="false" name="cellMappingType">
    <xsd:annotation>
      <xsd:documentation>
        Documents a possible choice in a cell-mapping tile selector. 

        A cell-mapping tile selector uses conditional expressions to
        locate tiles for a cell. Each condition is usually keyed with 
        a single character identifying the expression. 

        When generating templates, the tile generator will produce a 
        tile for each permutation of all cell-mapping selectors.

        The runtime usually will not read this metadata entry and simply
        assumes that the tile set creator provides valid mappings for
        all hardcoded conditions provided by the game system.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:attribute type="xsd:string" name="key" use="required"/>
    <xsd:attribute type="xsd:string" name="name" use="required"/>
    <xsd:attribute type="xsd:string" name="comment" use="optional"/>
    <xsd:attribute type="xsd:string" name="highlight-color" use="optional"/>
  </xsd:complexType>

  <xsd:complexType mixed="false" name="gridMetaDataType">
    <xsd:annotation>
      <xsd:documentation>
        Documents the metadata for a tile grid. 
        
        This contains the matcher type, which allows the system to 
        generate the various tiles needed based on the built-in knowledge we
        have about the existing tile matchers.
        
        The pattern attribute can be used to override the pattern used
        to generate the tiles. This pattern should match the pattern
        given to the TileRegistry when configuring the renderer and is
        obviously dependent on the match-type.
        
        In a future version this element can hold additional information
        like tile-tag definitions and so on.
        
        Grid-Width and Grid-Height are only needed for "Basic" grids.
        All other grid types use a fixed layout at all times.
        
        Cell map elements is a space separated list of tag suffixes.
        Keep these short, but unique, for instance use the first
        character of the name of the condition you are matching.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:attribute type="xsd:string" name="title" use="optional"/>
    <xsd:attribute type="xsd:string" name="pattern" use="optional"/>
    <xsd:attribute type="xsd:string" name="match-type" use="optional" default="Basic"/>
    <!-- deprecated -->
    <xsd:attribute type="xsd:string" name="cell-map-elements" use="optional"/>

    <xsd:attribute type="xsd:string" name="text-color" use="optional"/>
    <xsd:attribute type="xsd:string" name="border-color" use="optional"/>
    <xsd:attribute type="xsd:string" name="background-color" use="optional"/>
    <xsd:attribute type="xsd:unsignedInt" name="border" use="optional"/>
    <xsd:attribute type="xsd:unsignedInt" name="margin" use="optional"/>
    <xsd:attribute type="xsd:unsignedInt" name="padding" use="optional"/>

    <xsd:attribute type="xsd:unsignedInt" name="grid-width" use="optional"/>
    <xsd:attribute type="xsd:unsignedInt" name="grid-height" use="optional"/>
    <xsd:choice minOccurs="0" maxOccurs="unbounded">
      <xsd:element name="cell-mapping" type="cellMappingType"/>
    </xsd:choice>
  </xsd:complexType>

  <xsd:complexType mixed="false" name="gridType">
    <xsd:annotation>
      <xsd:documentation>
        Defines a grid of tiles. The grid starts at the offset 'x' and 'y'.
        Each tile contained in the grid has a default width and height of
        'cell-width' and 'cell-height'. 
        
        X, Y  are required attributes, cell-width and cell-height defaults
        to the tile width and tile height defined in the root element.
        
        Each tile within the grid can be separated via the cell-spacing
        attribute. 
        
        The anchor point for each tile is defined via the 'anchor-x' and 
        'anchor-y' coordinate. This is used to align tiles of different 
        sizes to the common reference point. If no anchor point is given,
        the anchor point will be located at the centre point of the tile
        ('with/2' and 'height/2'). 
        
        If the grid-type (defined in the metadata element) is not 'Basic'
        then at design time all tiles contained in the grid will be 
        replaced with generated tiles. 
        
        Width and height defines a cell-width and cell-height (the size
        of each texture contained in the grid. This can be larger or 
        smaller than the standard tile-size defined in the root element.
        
        If no cell-width or cell-height is defined explicitly here, then
        the system will use a sensible default value. If 'half-cell-hint'
        is set to true, we'll assume a 'corner' match system and thus the
        cell-size will be equal to a quarter of tile size. If there is
        no half-cell-hint or the hint is set to false, we will assume 
        a standard cell size that is equal to the tile-size defined on
        the root element.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="metadata" minOccurs="0" maxOccurs="1" type="gridMetaDataType"/>
      <xsd:choice minOccurs="0" maxOccurs="unbounded">
        <xsd:element name="tile" type="tileType"/>
      </xsd:choice>
    </xsd:sequence>
    <xsd:attribute type="xsd:string" name="name" use="required"/>
    <xsd:attribute name="x" type="xsd:unsignedInt" use="required"/>
    <xsd:attribute name="y" type="xsd:unsignedInt" use="required"/>
    <xsd:attribute name="cell-width" type="xsd:unsignedInt" use="optional"/>
    <xsd:attribute name="cell-height" type="xsd:unsignedInt" use="optional"/>
    <xsd:attribute name="cell-spacing" type="xsd:unsignedInt" use="optional"/>
    <xsd:attribute name="anchor-x" type="xsd:unsignedInt" use="optional"/>
    <xsd:attribute name="anchor-y" type="xsd:unsignedInt" use="optional"/>
    <xsd:attribute name="half-cell-hint" type="xsd:boolean" use="optional"/>
  </xsd:complexType>

  <xsd:complexType name="collectionMetaDataType">
    <xsd:annotation>
      <xsd:documentation>
        Design time metadata.
        
        Title defines a string that is printed at the bottom of the generated
        sprite sheet. Use that for documentation purposes. 

        Border defines a border around all grids of a collection.
        
        Margin defines the spacing around the collection (outside of the border). 

      </xsd:documentation>
    </xsd:annotation>
    <xsd:attribute type="xsd:string" name="title" use="optional"/>
    <xsd:attribute type="xsd:string" name="last-export-location" use="optional"/>

    <xsd:attribute type="xsd:string" name="text-color" use="optional"/>
    <xsd:attribute type="xsd:string" name="border-color" use="optional"/>
    <xsd:attribute type="xsd:string" name="background-color" use="optional"/>
    <xsd:attribute type="xsd:unsignedInt" name="border" use="optional"/>
    <xsd:attribute type="xsd:unsignedInt" name="margin" use="optional"/>
    <xsd:attribute type="xsd:unsignedInt" name="padding" use="optional"/>
  </xsd:complexType>

  <xsd:complexType name="collectionType">
    <xsd:annotation>
      <xsd:documentation>
        A collection defines all tiles that share a given underlying texture atlas.
        If you use the include feature, you should probably define one file per 
        directory with multiple collections or one file per texture atlas with 
        one collection each.
        
        The id given will be used by the content loader to load the underlying texture
        for the texture atlas. Note that this ID should be a relative path that is based
        on the base path that was used to initiate the parsing.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="metadata" minOccurs="0" maxOccurs="1" type="collectionMetaDataType"/>
      <xsd:choice minOccurs="1" maxOccurs="unbounded">
        <xsd:element name="grid" type="gridType"/>
      </xsd:choice>
    </xsd:sequence>
    <xsd:attribute type="xsd:string" name="id" use="required"/>
  </xsd:complexType>
  
  <xsd:complexType mixed="false" name="includeType">
    <xsd:annotation>
      <xsd:documentation>
        Defines an include file. This file will be read as if it is part of the
        parent document. All paths are resolved relative to the currently parsed 
        document.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:attribute type="xsd:string" name="file" use="required"/>
  </xsd:complexType>

  <xsd:simpleType name="tileTypeAttr">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="Grid"/>
      <xsd:enumeration value="Isometric"/>
      <xsd:enumeration value="Hex"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:complexType name="metaDataType">
    <xsd:annotation>
      <xsd:documentation>
        Put any management information in here. The parser does not care about your
        metadata.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:any minOccurs="0" maxOccurs="unbounded" processContents="lax"/>
    </xsd:sequence>

    <xsd:attribute type="xsd:string" name="text-color" use="optional"/>
    <xsd:attribute type="xsd:string" name="border-color" use="optional"/>
    <xsd:attribute type="xsd:string" name="background-color" use="optional"/>
    <xsd:attribute type="xsd:unsignedInt" name="border" use="optional"/>
    <xsd:attribute type="xsd:unsignedInt" name="margin" use="optional"/>
    <xsd:attribute type="xsd:unsignedInt" name="padding" use="optional"/>

    <xsd:anyAttribute processContents="lax"/>
  </xsd:complexType>
  
  <xsd:complexType mixed="false" name="tilesType">
    <xsd:annotation>
      <xsd:documentation>
        The tiles element is the root of all documents (regardless of whether the
        document is included or the base document).
      </xsd:documentation>
    </xsd:annotation>
    <xsd:choice minOccurs="0" maxOccurs="unbounded">
      <xsd:element name="metadata" type="metaDataType"/>
      <xsd:element name="include" type="includeType"/>
      <xsd:element name="collection" type="collectionType"/>
    </xsd:choice>
    <xsd:attribute name="type" type="tileTypeAttr" use="optional" default="Grid"/>
    <xsd:attribute name="width" type="xsd:unsignedInt" use="optional"/>
    <xsd:attribute name="height" type="xsd:unsignedInt" use="optional"/>
  </xsd:complexType>

  <xsd:element name="tileset" type="tilesType">
    <xsd:annotation>
      <xsd:documentation>
        This is the only valid root element for styles. See "stylesType" for contents.
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>

</xsd:schema>
